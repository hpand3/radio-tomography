/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>
#include <xdc/cfg/global.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Mailbox.h>

/* TI-RTOS Header files */
#include <ti/drivers/PIN.h>
#include <ti/drivers/UART.h>
#include <string.h>

/* Example/Board Header files */
#include "Board.h"

#include <stdint.h>
#include "simple_UART.h"

#define TIMEOUT		10  /* timeout, in system ticks */
#define TASKSTACKSIZE     768

Task_Struct task0Struct;
Char task0Stack[TASKSTACKSIZE];

typedef struct MsgObj {
    Char printstr[100];   /* writer string */
    Int charnum;
} MsgObj, *Msg;

/*
 *  ======== echoFxn ========
 */
void echoFxn(UArg arg0, UArg arg1)
{
    char input;
    MsgObj msg;
    UART_Handle uart;
    UART_Params uartParams;
    const char echoPrompt[] = "\fInitialising UART...\r\n";

    /* Create a UART with data processing off. */
    UART_Params_init(&uartParams);
    uartParams.writeDataMode = UART_DATA_BINARY;
    uartParams.readDataMode = UART_DATA_BINARY;
    uartParams.readReturnMode = UART_RETURN_FULL;
    uartParams.readEcho = UART_ECHO_OFF;
    uartParams.baudRate = 9600;
    uart = UART_open(Board_UART0, &uartParams);

    if (uart == NULL) {
        System_abort("Error opening the UART");
    }

    UART_write(uart, echoPrompt, sizeof(echoPrompt));

    /* Loop forever echoing */
    while (1) {
    	/* wait for mailbox to be posted by writer() */
		if (Mailbox_pend(mbx0, &msg, TIMEOUT) == 0) {
			System_printf("reader: timeout expired for Mailbox_pend()\n");
			break;
		}
        UART_write(uart, &input, 1);
    }
}

void Simple_UART_printf(Char printsr[100], Int charn) {
	MsgObj msg;
	msg.printstr = printsr;
	msg.charnum = charn;
	/* enqueue message */
	Mailbox_post(mbx0, &msg, TIMEOUT);
}

void Simple_UART_createTask(void) {
	Task_Params taskParams;
    /* Construct BIOS objects */
    Task_Params_init(&taskParams);
    taskParams.stackSize = TASKSTACKSIZE;
    taskParams.stack = &task0Stack;
    Task_construct(&task0Struct, (Task_FuncPtr)echoFxn, &taskParams, NULL);
}
